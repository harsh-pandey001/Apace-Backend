name: Deploy Backend to Cloud Run

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'AdminPanel/**'
      - 'README.md'
      - 'docs/**'
      - '.github/workflows/admin-deploy.yml'
  workflow_dispatch:

env:
  PROJECT_ID: bright-meridian-465411-e2
  SERVICE_NAME: apace-backend
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint
        continue-on-error: true

      - name: Run tests
        run: npm test
        continue-on-error: true

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Setup Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Configure Docker for GCR
        run: |
          gcloud auth configure-docker gcr.io

      - name: Build Docker image
        run: |
          docker build \
            --tag gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --tag gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest \
            --platform linux/amd64 \
            .

      - name: Push Docker image
        run: |
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:latest

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --allow-unauthenticated \
            --port 5000 \
            --memory 512Mi \
            --cpu 1000m \
            --min-instances 0 \
            --max-instances 10 \
            --set-env-vars NODE_ENV=production \
            --set-env-vars CACHE_ENABLED=true \
            --set-env-vars CACHE_TTL_DEFAULT=300 \
            --update-secrets DATABASE_HOST=DATABASE_HOST:latest \
            --update-secrets DATABASE_PORT=DATABASE_PORT:latest \
            --update-secrets DATABASE_USER=DATABASE_USER:latest \
            --update-secrets DATABASE_PASSWORD=DATABASE_PASSWORD:latest \
            --update-secrets DATABASE_NAME=DATABASE_NAME:latest \
            --update-secrets JWT_SECRET=JWT_SECRET:latest \
            --update-secrets JWT_REFRESH_SECRET=JWT_REFRESH_SECRET:latest \
            --update-secrets JWT_EXPIRES_IN=JWT_EXPIRES_IN:latest \
            --update-secrets REFRESH_TOKEN_EXPIRES_IN=REFRESH_TOKEN_EXPIRES_IN:latest \
            --update-secrets REDIS_HOST=REDIS_HOST:latest \
            --update-secrets REDIS_PORT=REDIS_PORT:latest \
            --update-secrets REDIS_PASSWORD=REDIS_PASSWORD:latest \
            --update-secrets CORS_ORIGIN=CORS_ORIGIN:latest \
            --update-secrets FCM_PROJECT_ID=FCM_PROJECT_ID:latest \
            --update-secrets FCM_SERVICE_ACCOUNT_KEY=FCM_SERVICE_ACCOUNT_KEY:latest \
            --update-secrets FCM_ENABLED=FCM_ENABLED:latest \
            --service-account=86500976134-compute@developer.gserviceaccount.com \
            --timeout 300 \
            --concurrency 80

      - name: Get service URL
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format 'value(status.url)')
          echo "Backend deployed to: $SERVICE_URL"
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV


      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Test health endpoint
          curl -f "$SERVICE_URL/health" || curl -f "$SERVICE_URL/" || exit 1
          
          # Test API endpoint
          curl -f "$SERVICE_URL/api/health" || echo "API health endpoint not available"
          
          # Test FCM health endpoint
          curl -f "$SERVICE_URL/health/fcm" || echo "FCM health endpoint not available"
          
          echo "‚úÖ Smoke tests passed!"

      - name: Promote to live traffic
        run: |
          echo "Service deployed directly to live traffic"

      - name: Cleanup old images
        run: |
          # Keep only the 5 most recent images
          gcloud container images list-tags gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }} \
            --limit=999 --sort-by=TIMESTAMP \
            --format="get(digest)" | tail -n +6 | \
            xargs -I {} gcloud container images delete gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}@{} --force-delete-tags --quiet || true

      - name: Summary
        run: |
          echo "üéâ Backend deployment completed successfully!"
          echo "üöÄ Service URL: $SERVICE_URL"
          echo "üè∑Ô∏è  Image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}"
          echo "üìä View logs: https://console.cloud.google.com/run/detail/${{ env.REGION }}/${{ env.SERVICE_NAME }}/logs"
          echo "üîó API Documentation: $SERVICE_URL/api/docs"